# ----------------------------------------------------------------------------
# Filename: ising_nd.py
# Mustapha Bousakla

#well done at last! :D

import numpy as np
from numpy.random import rand
import matplotlib.pyplot as plt
import time


time_start = time.clock()


def initialstate(N):   
    ''' generates a random spin configuration for initial condition'''
    state = 2*np.random.randint(2, size=(N,N))-1
    return state
 
def mcmove(config, beta):
    for i in range(N):
        for j in range(N):  
                a = np.random.randint(0, N)
                b = np.random.randint(0, N)
                s =  config[a, b]
                #calculate energy cost of this new configuration (the % is for calculation of periodic boundary condition)
                nb = config[(a+1)%N,b] + config[a,(b+1)%N] + config[(a-1)%N,b] + config[a,(b-1)%N]
                cost = 2*s*nb
                #flip spin or not depending on the cost and its Boltzmann factor
                ## (acceptance probability is given by Boltzmann factor with beta = 1/kBT
                if cost < 0:
                    s *= -1
                elif rand() < np.exp(-cost*beta):
                    s *= -1
                config[a, b] = s
    return config

#This function calculates the energy of a given configuration for the plots of Energy as a function of T
def calcEnergy(config):
    '''Energy of a given configuration'''
    energy = 0
    for i in range(len(config)):
        for j in range(len(config)):
            S = config[i,j]
            nb = config[(i+1)%N, j] + config[i,(j+1)%N] + config[(i-1)%N, j] + config[i,(j-1)%N]
            energy += -nb*S
    return energy/4.


def calcMag(config):
    mag = abs(np.sum(config))
    return mag


       # number of temperature points
N2       = [4,8,16,32,64]      # size of the lattice, N x N
eqSteps = 2**10      # number of MC sweeps for equilibration
mcSteps = 1000       # number of MC sweeps for calculation

tm = 2.269;    T=np.linspace(0.1, 5, 50)
nt = np.size(T)



plt.subplots(2,2, figsize=(18,15))

for k in range(np.size(N2)):
    N=N2[k]
    n1, n2  = 1.0/(mcSteps*N*N), 1.0/(mcSteps*mcSteps*N*N)
    Energy       = np.zeros(nt);   Magnetization  = np.zeros(nt)
    SpecificHeat = np.zeros(nt);   Susceptibility = np.zeros(nt)
    
    print 'Starting Simulations at ',len(T),' different temperatures.'
    for m in range(len(T)):
        E1 = M1 = E2 = M2 = 0
        config = initialstate(N)
        iT=1.0/T[m]
        iT2=iT*iT
        print 'Simulation ',m+1,' of',len(T),' at reduced temperature T=',T[m]
    
        for i in range(eqSteps):         # equilibrate
            mcmove(config, iT)           # Monte Carlo moves

        for i in range(mcSteps):
            mcmove(config, iT)           
            Ene = calcEnergy(config)     # calculate the energy
            Mag = calcMag(config)        # calculate the magnetisation

            E1 = E1 + Ene
            M1 = M1 + Mag
            M2 = M2 + Mag*Mag 
            E2 = E2 + Ene*Ene

            Energy[m]         = n1*E1
            Magnetization[m]  = n1*M1
            SpecificHeat[m]   = (n1*E2 - n2*E1*E1)*iT2
            Susceptibility[m] = (n1*M2 - n2*M1*M1)*iT

#
# Plot everything
#

    

    
    
    plt.subplot(2,2,1)
    plt.plot(T, Energy, 'o',label=N)
    plt.axvline(x=2.269)
    plt.xlim([-0.2, 5.2])
    plt.xlabel(r'$T$', fontsize=20)
    plt.ylabel(r'$H$', fontsize=20)
    plt.legend(loc=2,numpoints=1)

    plt.subplot(2,2,2)
    plt.plot(T, abs(Magnetization), 'o', label=N)
    plt.axvline(x=2.269)
    plt.xlim([-0.2, 5.2])
    plt.ylim([-0.02,1.02])
    plt.xlabel(r'$T$', fontsize=20)
    plt.ylabel(r'$M$', fontsize=20)
    plt.legend(loc=1,numpoints=1)

    plt.subplot(2,2,3)
    plt.plot(T, SpecificHeat, 'o', label=N)
    plt.axvline(x=2.269)
    plt.xlim([-0.2, 5.2])
    plt.xlabel(r'$T$', fontsize=20)
    plt.ylabel(r'$C_{V}$', fontsize=20)
    plt.legend(loc=1, numpoints=1)
    
    plt.subplot(2,2,4)
    plt.plot(T, Susceptibility, 'o',label=N)
    plt.axvline(x=2.269)
    plt.xlim([-0.2, 5.2])
    plt.xlabel(r'$T$', fontsize=20)
    plt.ylabel(r'$\chi$', fontsize=25)
    plt.legend(loc=1,numpoints=1)



plt.show()

time_elapsed = (time.clock() - time_start)
print(time_elapsed)  
